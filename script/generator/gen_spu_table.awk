# Generate spu_table.awk

BEGIN {

   instruction_pipe = "<None>" # Need to be set to "even" or "odd"; 
   line = 0

      gen_cmd_count_name          = "spu_cmd_count" 
      gen_cmd_name_table_name     = "spu_cmd_list"

      gen_cmd_latency_table_name  = "spu_cmd_latency"
      gen_cmd_pipe_table_name     = "spu_cmd_pipe"
      gen_cmd_argc_table_name     = "spu_cmd_argc"
      gen_cmd_argv_table_name     = "spu_cmd_argv"
	  gen_cmd_min_argc_table_name = "spu_cmd_minc"
	  gen_cmd_max_argc_table_name = "spu_cmd_maxc"

   corresponding_type["r"] = "ro"
   corresponding_type["w"] = "wo"
   corresponding_type["e"] = "rw"
   corresponding_type["i(r)"] = "ir"
   corresponding_type["i"] = "im"
   corresponding_type["s"] = "sr"
   corresponding_type["c"] = "ch"
   corresponding_type["b"] = "br"
   corresponding_type["l"] = "lb"

   corresponding_type["!r"] = "!ro"
   corresponding_type["!w"] = "!wo"
   corresponding_type["!e"] = "!rw"
   corresponding_type["!i(r)"] = "!ir"
   corresponding_type["!i"] = "!im"
   corresponding_type["!s"] = "!sr"
   corresponding_type["!c"] = "!ch"
   corresponding_type["!b"] = "!br"
   corresponding_type["!l"] = "!lb"


   print "###############################################################################"
   print "###   This file has been generated by a script -- don't modify it by hand   ###"
   print "###############################################################################"
   print ""
   print "###############################################################################"
   print "# This generated file is meant to help the creation of awk script which deals"
   print "# with spu asm instruction."
   print "# By using this files, several variables will be set with information about"
   print "# those instructions."
   print "#"
   print "# - " gen_cmd_count_name ": scalar type"
   print "#     reference the total number of spu instructions"
   print "# - " gen_cmd_name_table_name ": array type 1D"
   print "#     access: " gen_cmd_name_table_name "[N]"
   print "#     contains the name of the Nth instruction of the spu stored in this array"
   print "#"
   print "# - " gen_cmd_latency_table_name ": array type 1D"
   print "#     access: " gen_cmd_latency_table_name "[cmd_name]"
   print "#     contains the latency of the instruction named: cmd_name"
   print "# - " gen_cmd_pipe_table_name ": array type 1D"
   print "#     access: " gen_cmd_pipe_table_name "[cmd_name]"
   print "#     contains the pipe name (\"even\" or \"odd\") of the instruction: cmd_name"
   print "# - " gen_cmd_argc_table_name ": array type 1D <deprecated>"
   print "#     access: " gen_cmd_argc_table_name "[cmd_name]"
   print "#     contains the number of argument for the instruction: cmd_name"
   print "#     This variable is deprecated and is matching the minimum value."
   print "# - " gen_cmd_min_argc_table_name ": array type 1D"
   print "#     contains the minimum number of argument for the instruction: cmd_name"
   print "# - " gen_cmd_max_argc_table_name ": array type 1D"
   print "#     contains the maximum number of argument for the instruction: cmd_name"
   print "# - " gen_cmd_argv_table_name ": array type 2D"
   print "#     access: " gen_cmd_argv_table_name "[cmd_name, arg_ndx]"
   print "#     contains the type of the \"arg_ndx\"th argument for the instr cmd_name"
   print "#"
   print "#------------------------------------------------------------------------------"
   print "# Description of each argument type:"
   print "#   \"ro\": read only register"
   print "#   \"wo\": write only register"
   print "#   \"rw\": read/write register"
   print "#   \"ir\": immediate value added to a read only register -- form: imm(reg)"
   print "#   \"im\": immediate value"
   print "#   \"sr\": special purpose register"
   print "#   \"ch\": channel"
   print "#   \"br\": branch label"
   print "#   \"lb\": offset label"
   print "# Some parameter might be optional, in that case a  \"!\" is inserted as first"
   print "# character. e.g: \"ro\""
   print "#"
   print "# Note: the indices range are 0 to N-1"
   print "###############################################################################"
   print ""
   print "BEGIN {"
   print "\t# Initialization:"
   print "\t" gen_cmd_count_name " = 0;"
   print ""

}

{ 
   line++;

   # Clean each line: 
   sub(/\r$/,"");                 # Dos 2 Unix
   gsub(/;.*$/,"" ,$0)            # Remove comments
   gsub(/^[ \t]+|[ \t]+$/,"", $0) # Trim white spaces

   if ( $0 != "" ) 
   {
      # Check if it's a command type setting
      if ( $0 ~ /^\[.*\]$/ ) 
      {
         cmd = tolower(substr($0, 2, length($0)-2));

         if ( cmd == "odd" || cmd == "even" ) 
         {
            instruction_pipe = cmd;
         }
         else 
         {
            print "** Error **"
            print "** Error ** (line:" line ") Unknown command: " cmd
            print "** Error **"
            exit 1
         }
      }
      else
      {
         cmd_name     = $1
         cmd_latency  = $NF
         cmd_pipe     = instruction_pipe;
         cmd_argc     = NF - 2
         cmd_argv[0]  = "<None>"
         cmd_argstr   = ""
		 cmd_optional = 0

         if ( cmd_pipe == "<None>" ) 
         {
            print "** Error **"
            print "** Error ** (line:" line ") Command defined without having the pipeline defined: " cmd_name
            print "** Error **"
            exit 1
         }
         else
         {
            # First param "cmd name", last "latency"
            # Build the arg list
            for ( i = 2 ; i < NF ; i++ ) 
            {
               cmd_argstr = cmd_argstr $i
            }

            cmd_argc = split(cmd_argstr, cmd_argv, ",")


            print "\t# Command: " cmd_name
            print "\t" gen_cmd_name_table_name "[" gen_cmd_count_name"++] = \"" cmd_name "\""
            print "\t" gen_cmd_latency_table_name "[\"" cmd_name "\"] = " cmd_latency
            print "\t" gen_cmd_pipe_table_name "[\"" cmd_name "\"] = \"" cmd_pipe "\""

            for ( i = 1 ; i <= cmd_argc ; i++ )
            {
               type = cmd_argv[i]
               if ( !(type in corresponding_type) ) 
               {
                  print "** Error **"
                  print "** Error ** (line:" line ") Cannot convert the following argument type: " type
                  print "** Error **"
                  exit 1
               }
			   if ( substr(type, 1,1) == "!" )
				  cmd_optional++
               print "\t" gen_cmd_argv_table_name "[\"" cmd_name "\", " i - 1 "] = \"" corresponding_type[type] "\""
               # Note: don't forget: i(r)!!!
            }

            print "\t" gen_cmd_argc_table_name "[\"" cmd_name "\"] = " cmd_argc - cmd_optional
            print "\t" gen_cmd_min_argc_table_name "[\"" cmd_name "\"] = " cmd_argc - cmd_optional
            print "\t" gen_cmd_max_argc_table_name "[\"" cmd_name "\"] = " cmd_argc
            print ""
         }
      }
   }
}

END {
   print "}"
   print
}
